#!/usr/bin/env node

var myArgs = process.argv.slice(2);

/**
 * Module dependencies.
 */

var app = require('../app');
var apps = require('../app');
var debug = require('debug')('server'), debugs = require('debug')('httpsServer');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || (myArgs).length != 2 || ((myArgs).length == 2 && !isNumeric(myArgs[0])) ? '30087' : myArgs[0]);
app.set('port', port);
app.locals.port_http=port;
//console.log(app.locals);
var ports = normalizePort(process.env.PORT || (myArgs).length != 2 || ((myArgs).length == 2 && !isNumeric(myArgs[1])) ? '38443' : myArgs[1]);
apps.set('port', ports);
apps.locals.port_https=ports;
//console.log(apps.locals);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


//=========================================
var fs = require('fs')
var privateKey = fs.readFileSync("/home/yichung/ssl/private.key");
var certificate = fs.readFileSync("/home/yichung/ssl/certificate.crt");
var credentials = { key: privateKey, cert: certificate };
var https = require('https');
var httpsServer = https.createServer(credentials, app);
httpsServer.listen(ports);
httpsServer.on('error', onErrors);
httpsServer.on('listening', onListenings);
//=========================================


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  console.log("http onError");
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onErrors(errors) {
  console.log("https onError");
  if (errors.syscall !== 'listen') {
    throw errors;
  }

  var bind = typeof ports === 'string'
    ? 'Pipe ' + ports
    : 'Port ' + ports;

  // handle specific listen errors with friendly messages
  switch (errors.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function onListenings() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debugs('Listening on ' + bind);
}

function isNumeric(str) {
  if (typeof str != "string") return false // we only process strings!  
  return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
    !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail
}